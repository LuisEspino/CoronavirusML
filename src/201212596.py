import matplotlib.pyplot as plt
import numpy as np
from sklearn.cluster import KMeans
from sklearn.neighbors import NearestCentroid
#[Contagiados, # dia de pandemia, # dia del a√±o]
X = np.array([[1,1,73],
[1,2,74],
[6,3,75],
[0,4,76],
[2,5,77],
[2,6,78],
[5,7,79],
[3,8,80],
[1,9,81],
[2,10,82],
[0,11,83],
[4,12,84],
[1,13,85],
[4,14,86],
[4,15,87],
[3,16,88],
[0,17,89],
[4,18,90],
[5,19,91],
[6,20,92],
[6,21,93],
[8,22,94],
[7,23,95],
[7,24,96],
[5,25,97],
[11,26,98],
[38,27,99],
[15,28,100],
[13,29,101],
[3,30,102],
[10,31,103],
[16,32,104],
[71,33,105],
[10,34,106],
[19,35,107],
[14,36,108],
[9,37,109],
[3,38,110],
[34,39,111],
[71,40,112],
[24,41,113],
[52,42,114],
[65,43,115],
[19,44,116],
[14,45,117],
[29,46,118],
[27,47,119],
[31,48,120],
[48,49,121],
[20,50,122],
[16,51,123],
[24,52,124],
[44,53,125],
[47,54,126],
[66,55,127],
[46,56,128],
[99,57,129],
[87,58,130],
[49,59,131],
[114,60,132],
[129,61,133],
[182,62,134],
[154,63,135],
[138,64,136],
[107,65,137],
[191,66,138],
[279,67,139],
[255,68,140],
[458,69,141],
[555,70,142],
[517,71,143],
[248,72,144],
[204,73,145],
[614,74,146],
[575,75,147],
[409,76,148],
[441,77,149],
[400,78,150],
[192,79,151],
[113,80,152],
[372,81,153],
[359,82,154],
[450,83,155],
[442,84,156],
[577,85,157],
[535,86,158],
[321,87,159],
[592,88,160],
[692,89,161],
[743,90,162],
[777,91,163],
[720,92,164],
[507,93,165],
[447,94,166],
[983,95,167],
[926,96,168],
[847,97,169],
[721,98,170],
[886,99,171],
[702,100,172],
[317,101,173],
[1068,102,174],
[1182,103,175],
[1147,104,176],
[1341,105,177],
[1299,106,178],
[868,107,179],
[365,108,180],
[946,109,181],
[1627,110,182],
[1337,111,183],
[1322,112,184],
[1232,113,185],
[861,114,186],
[364,115,187],
[1207,116,188],
[1215,117,189],
[1244,118,190],
[1100,119,191],
[1006,120,192],
[724,121,193],
[426,122,194],
[1129,123,195],
[1074,124,196],
[1054,125,197],
[1121,126,198],
[982,127,199],
[650,128,200],
[337,129,201],
[1189,130,202],
[995,131,203],
[1039,132,204],
[944,133,205],
[963,134,206],
[564,135,207],
[283,136,208],
[1182,137,209],
[1054,138,210],
[803,139,211],
[815,140,212],
[830,141,213],
[559,142,214],
[388,143,215],
[1036,144,216],
[832,145,217],
[884,146,218],
[719,147,219],
[675,148,220],
[507,149,221],
[279,150,222],
[789,151,223],
[740,152,224],
[679,153,225],
[683,154,226],
[628,155,227],
[457,156,228],
[370,157,229],
[853,158,230],
[715,159,231],
[675,160,232],
[731,161,233],
[689,162,234],
[399,163,235],
[285,164,236],
[751,165,237],
[687,166,238],
[687,167,239],
[631,168,240],
[651,169,241],
[349,170,242],
[229,171,243],
[668,172,244],
[659,173,245],
[584,174,246],
[600,175,247],
[504,176,248],
[346,177,249],
[205,178,250],
[717,179,251],
[641,180,252],
[541,181,253],
[648,182,254],
[626,183,255],
[375,184,256],
[235,185,257],
[713,186,258],
[345,187,259],
[666,188,260],
[629,189,261],
[688,190,262],
[527,191,263],
[335,192,264],
[763,193,265],
[761,194,266],
[708,195,267],
[706,196,268],
[598,197,269],
[342,198,270],
[228,199,271],
[661,200,272],
[610,201,273],
[546,202,274],
[590,203,275],
[578,204,276],
[302,205,277],
[208,206,278],
[671,207,279],
[600,208,280],
[567,209,281],
[541,210,282],
[567,211,283],
[335,212,284],
[193,213,285],
[581,214,286],
[601,215,287],
[531,216,288],
[495,217,289],
[504,218,290],
[258,219,291],
[215,220,292],
[611,221,293],
[368,222,294],
[496,223,295],
[544,224,296],
[536,225,297],
[276,226,298],
[176,227,299],
[558,228,300],
[489,229,301],
[495,230,302],
[443,231,303],
[456,232,304],
[249,233,305],
[146,234,306],
[283,235,307],
[492,236,308],
[357,237,309],
[335,238,310],
[239,239,311],
[139,240,312],
[122,241,313],
[158,242,314],
])
kmeans = KMeans(n_clusters=3)
kmeans.fit(X)
print(kmeans.cluster_centers_)
plt.scatter(X[:,0],X[:,2],c=kmeans.labels_,cmap='rainbow')
plt.scatter(kmeans.cluster_centers_[:,0],
kmeans.cluster_centers_[:,1], color='black')

""""
[[  89.22580645,   72.69892473,  144.69892473] = C1
[1067.17948718,  120.69230769,  192.69230769] = C2
 [ 558.45454545,  163.04545455,  235.04545455]] = C3
"""
Centroide = np.array([[89.22580645,72.69892473,144.69892473],
[1067.17948718,120.69230769,192.69230769],
 [558.45454545,  163.04545455,  235.04545455],])
y = np.array(['C1', 'C2', 'C3'])
clf = NearestCentroid()
clf.fit(Centroide,y)
#plt.show()

clustering = []
#Generando random
for i in range(0,len(X)):
  clustering.append(clf.predict([X[i]]))
#print('test:', *clustering, sep=',\n\t')
"""
Author: Daniel Vega - Jorge Veliz
Adding clustering analysis to re-arrange data in order to make predictions on futher dates
"""
clustering =[
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C1',
    'C3',
    'C3',
    'C3',
    'C1',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C2',
    'C2',
    'C2',
    'C3',
    'C2',
    'C3',
    'C1',
    'C2',
    'C2',
    'C2',
    'C2',
    'C2',
    'C2',
    'C3',
    'C2',
    'C2',
    'C2',
    'C2',
    'C2',
    'C2',
    'C3',
    'C2',
    'C2',
    'C2',
    'C2',
    'C2',
    'C3',
    'C3',
    'C2',
    'C2',
    'C2',
    'C2',
    'C2',
    'C3',
    'C3',
    'C2',
    'C2',
    'C2',
    'C2',
    'C2',
    'C3',
    'C1',
    'C2',
    'C2',
    'C3',
    'C2',
    'C2',
    'C3',
    'C3',
    'C2',
    'C2',
    'C2',
    'C3',
    'C3',
    'C3',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C2',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C1',
    'C3',
    'C3',
    'C3',
    'C3',
    'C1',
    'C1',
    'C1',
    'C1'
]
y = np.array(clustering)
clf = NearestCentroid()
clf.fit(X,y)
# TEST CASE: Must show C1 
print(clf.predict([[1,2,74]]))
plt.show()
